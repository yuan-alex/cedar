
generator client {
  provider = "prisma-client-js"
  output   = "../server/utils/prisma-client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Thread {
  id             Int      @id @default(autoincrement())
  token          String   @unique @default(uuid())
  name           String   @default("New chat")
  model          String
  userId         String
  user           User     @relation(fields: [userId], references: [id])
  isDeleted      Boolean  @default(false)
  lastMessagedAt DateTime @default(now())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  messages ChatMessage[]
  runs     Run[]
}

model ChatMessage {
  id          Int      @id @default(autoincrement())
  token       String   @default(uuid())
  threadId    Int
  thread      Thread   @relation(fields: [threadId], references: [id])
  isAssistant Boolean
  isDeleted   Boolean  @default(false)
  content     String
  reasoning   String?
  createdAt   DateTime @default(now())

  runStep RunStep?
}

enum RunStatus {
  queued
  inProgress
  completed
  expired
  cancelled
  failed
}

model Run {
  id        Int       @id @default(autoincrement())
  token     String    @unique @default(uuid())
  thread    Thread    @relation(fields: [threadId], references: [id])
  threadId  Int
  status    RunStatus @default(queued)
  steps     RunStep[]
  createdAt DateTime  @default(now())
}

enum RunStepType {
  generation
}

enum GenerationProvider {
  openrouter
}

model RunStep {
  id    Int         @id @default(autoincrement())
  token String      @unique @default(uuid())
  runId Int
  run   Run         @relation(fields: [runId], references: [id])
  type  RunStepType @default(generation)

  // generation
  generationProvider      GenerationProvider? @default(openrouter)
  generationProviderToken String?             @unique
  generationModel         String?
  message                 ChatMessage?        @relation(fields: [messageId], references: [id])
  messageId               Int?                @unique

  createdAt DateTime @default(now())
}

model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]
  @@unique([email])
  @@map("user")

  // Custom fields
  threads       Thread[]
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}
