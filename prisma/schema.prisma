generator client {
  provider = "prisma-client-js"
  output   = "../server/utils/prisma-client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Thread {
  id             Int           @id @default(autoincrement())
  token          String        @unique @default(uuid())
  name           String        @default("New chat")
  userId         String
  user           User          @relation(fields: [userId], references: [id])
  isDeleted      Boolean       @default(false)
  lastMessagedAt DateTime      @default(now())
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  uiMessages     Json[]        @default([])
  messages       ChatMessage[]
}

enum ChatMessageRole {
  developer
  assistant
  user
}

enum ChatMessageStatus {
  inProgress
  completed
  failed
}

model ChatMessage {
  id             Int               @id @default(autoincrement())
  token          String            @default(uuid())
  threadId       Int
  thread         Thread            @relation(fields: [threadId], references: [id])
  provider       String?
  model          String?
  role           ChatMessageRole
  status         ChatMessageStatus @default(completed)
  isDeleted      Boolean           @default(false)
  uiMessageParts Json[]            @default([])
  rawEvent       Json?
  createdAt      DateTime          @default(now())
}

model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]

  role       String?
  banned     Boolean?  @default(false)
  banReason  String?
  banExpires DateTime?

  // Custom fields
  threads Thread[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  impersonatedBy String?

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}
